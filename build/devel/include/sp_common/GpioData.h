// Generated by gencpp from file sp_common/GpioData.msg
// DO NOT EDIT!


#ifndef SP_COMMON_MESSAGE_GPIODATA_H
#define SP_COMMON_MESSAGE_GPIODATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sp_common
{
template <class ContainerAllocator>
struct GpioData_
{
  typedef GpioData_<ContainerAllocator> Type;

  GpioData_()
    : bus()
    , gpio_name()
    , gpio_state()
    , gpio_type()
    , header()  {
    }
  GpioData_(const ContainerAllocator& _alloc)
    : bus(_alloc)
    , gpio_name(_alloc)
    , gpio_state(_alloc)
    , gpio_type(_alloc)
    , header(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _bus_type;
  _bus_type bus;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _gpio_name_type;
  _gpio_name_type gpio_name;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _gpio_state_type;
  _gpio_state_type gpio_state;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _gpio_type_type;
  _gpio_type_type gpio_type;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;





  typedef boost::shared_ptr< ::sp_common::GpioData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sp_common::GpioData_<ContainerAllocator> const> ConstPtr;

}; // struct GpioData_

typedef ::sp_common::GpioData_<std::allocator<void> > GpioData;

typedef boost::shared_ptr< ::sp_common::GpioData > GpioDataPtr;
typedef boost::shared_ptr< ::sp_common::GpioData const> GpioDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sp_common::GpioData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sp_common::GpioData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sp_common::GpioData_<ContainerAllocator1> & lhs, const ::sp_common::GpioData_<ContainerAllocator2> & rhs)
{
  return lhs.bus == rhs.bus &&
    lhs.gpio_name == rhs.gpio_name &&
    lhs.gpio_state == rhs.gpio_state &&
    lhs.gpio_type == rhs.gpio_type &&
    lhs.header == rhs.header;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sp_common::GpioData_<ContainerAllocator1> & lhs, const ::sp_common::GpioData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sp_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sp_common::GpioData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sp_common::GpioData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sp_common::GpioData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sp_common::GpioData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sp_common::GpioData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sp_common::GpioData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sp_common::GpioData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "297858866c40f438698ae2b119d8be46";
  }

  static const char* value(const ::sp_common::GpioData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x297858866c40f438ULL;
  static const uint64_t static_value2 = 0x698ae2b119d8be46ULL;
};

template<class ContainerAllocator>
struct DataType< ::sp_common::GpioData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sp_common/GpioData";
  }

  static const char* value(const ::sp_common::GpioData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sp_common::GpioData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] bus\n"
"string[] gpio_name\n"
"bool[] gpio_state\n"
"string[] gpio_type\n"
"std_msgs/Header header\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sp_common::GpioData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sp_common::GpioData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bus);
      stream.next(m.gpio_name);
      stream.next(m.gpio_state);
      stream.next(m.gpio_type);
      stream.next(m.header);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpioData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sp_common::GpioData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sp_common::GpioData_<ContainerAllocator>& v)
  {
    s << indent << "bus[]" << std::endl;
    for (size_t i = 0; i < v.bus.size(); ++i)
    {
      s << indent << "  bus[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bus[i]);
    }
    s << indent << "gpio_name[]" << std::endl;
    for (size_t i = 0; i < v.gpio_name.size(); ++i)
    {
      s << indent << "  gpio_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gpio_name[i]);
    }
    s << indent << "gpio_state[]" << std::endl;
    for (size_t i = 0; i < v.gpio_state.size(); ++i)
    {
      s << indent << "  gpio_state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gpio_state[i]);
    }
    s << indent << "gpio_type[]" << std::endl;
    for (size_t i = 0; i < v.gpio_type.size(); ++i)
    {
      s << indent << "  gpio_type[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gpio_type[i]);
    }
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SP_COMMON_MESSAGE_GPIODATA_H
